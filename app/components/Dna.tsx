/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, forwardRef } from 'react'
import { useGLTF, useAnimations, Edges } from '@react-three/drei'
import { Group, Mesh, MeshStandardMaterial } from 'three'
import { useFrame } from '@react-three/fiber'

interface DnaModelProps {
  position?: [number, number, number]
  scale?: [number, number, number]
  rotation?: [number, number, number]
}

export const DnaModel = forwardRef<Group, DnaModelProps>((props, ref) => {
  const group = useRef<Group>(null)
  const meshRef = useRef<Mesh>(null)
  const { nodes, animations } = useGLTF('/dna.glb')
  const { actions } = useAnimations(animations, ref || group as any)

  // Créer un matériau chrome wireframe
  const chromeMaterial = new MeshStandardMaterial({
    color: '#ffffff',
    metalness: 1.0,
    roughness: 0.0,
    envMapIntensity: 2.0,
    emissive: '#000000',
    emissiveIntensity: 0.0,
    transparent: true,
    opacity: 0.1, // Très transparent pour voir les arêtes
  })

  // Matériau pour les arêtes wireframe
  const wireframeMaterial = new MeshStandardMaterial({
    color: '#ffffff',
    metalness: 1.0,
    roughness: 0.0,
    envMapIntensity: 3.0,
  })

  useEffect(() => {
    // Jouer l'animation de base du modèle si elle existe
    if (actions && Object.keys(actions).length > 0) {
      // Jouer la première animation disponible
      const firstAction = Object.values(actions)[0]
      if (firstAction) {
        firstAction.play()
        firstAction.setLoop(Infinity, Infinity) // Boucle infinie
        firstAction.timeScale = 0.5 // Vitesse à 0.5x (plus lent)
      }
    }
  }, [actions])

  // Animation du matériau pour un effet plus dynamique
  useFrame((state) => {
    if (chromeMaterial) {
      // Variation subtile de l'intensité de l'environnement
      chromeMaterial.envMapIntensity = 2.0 + Math.sin(state.clock.elapsedTime * 0.5) * 0.3
    }
  })

  return (
    <group ref={ref || group} {...props} dispose={null}>
      <group name="Scene">
        <mesh
          ref={meshRef}
          name="DNA_logo_3d"
          castShadow
          receiveShadow
          geometry={(nodes.DNA_logo_3d as Mesh).geometry}
          material={chromeMaterial}
          rotation={[Math.PI / 2, 0, 0]}
        >
          <Edges
            geometry={(nodes.DNA_logo_3d as Mesh).geometry}
            material={wireframeMaterial as any}
            scale={1.001} // Légèrement plus grand pour éviter le z-fighting
          />
        </mesh>
      </group>
    </group>
  )
})

DnaModel.displayName = 'DnaModel'

useGLTF.preload('/dna.glb')

